<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>David's Code Editor</title>
	<link rel="stylesheet" href="style.css" />
electron version 1.6.11
<link rel="stylesheet" href="node_modules/codemirror/lib/codemirror.css">
<link rel="stylesheet" href="node_modules/codemirror/theme/blackboard.css">
<script src="node_modules/codemirror/lib/codemirror.js"></script>
<script src="node_modules/codemirror/mode/javascript/javascript.js"></script>
<script src="node_modules/codemirror/addon/mode/loadmode.js"></script>
<script src="node_modules/codemirror/mode/meta.js"></script>
<script src="node_modules/codemirror/addon/hint/show-hint.js"></script>
<script src="node_modules/codemirror/addon/hint/css-hint.js"></script>
<script src="node_modules/codemirror/addon/hint/javascript-hint.js"></script>
<script src="node_modules/codemirror/addon/hint/css-hint.js"></script>
<link rel="stylesheet" href="node_modules/codemirror/addon/hint/show-hint.css">
	  <script src="node_modules/jshint/dist/jshint.js"></script>
  </head>
  <body>
  	<div id="menu">

	</div>
	<div id="sidebar">
	  <ul id="list">
		
	  </ul>
	</div>
	<div id="content"></div>
  </body>
	<script>
		var currentfile;
		 var myCodeMirror = CodeMirror(document.getElementById("content"), {
			 value: "function myScript(){return 100;}\n",
			 mode:  "javascript",
			 viewportMargin: Infinity,
			 lineNumbers: true,
			 extraKeys: {"Ctrl-Space":"autocomplete"},
			 theme:"blackboard"
		 });
		 
		 myCodeMirror.setValue("test");
		
		var count = 1;
		const fs = require("fs");
		fs.readdir('.', (err, dir) => {
		//console.log(dir);
			for(let filePath of dir){
				var list = document.createElement("li");
					text = document.createTextNode(filePath);
				list.appendChild(text);
				list.addEventListener("click",function(){
					CodeMirror.modeURL = "node_modules/codemirror/mode/%N/%N.js";
					fs.readFile(filePath, 'utf8', function (err,data) {
					  if (err) {
						return console.log(err);
					  }
					  
					 var val = filePath, m, mode, spec;
					 if (m = /.+\.([^.]+)$/.exec(val)) {
						var info = CodeMirror.findModeByExtension(m[1]);
						if (info) {
						  mode = info.mode;
						  spec = info.mime;
						}
					  } else if (/\//.test(val)) {
						var info = CodeMirror.findModeByMIME(val);
						if (info) {
						  mode = info.mode;
						  spec = val;
						}
					  } else {
						mode = spec = val;
					  }
						
					  if (mode) {
						  console.log(spec);
						myCodeMirror.setOption("mode", spec);
						CodeMirror.autoLoadMode(myCodeMirror, mode);
						  console.log(mode);
						  if(mode == "javascript"){
							  document.getElementById("content").addEventListener("change", runJSHint,"false");
							  setTimeout(updateHints, 100);
						  } else {
							  document.getElementById("content").removeEventListener("change", runJSHint, "false");
						  }
					  }
					  myCodeMirror.setValue(data);
					  currentfile = filePath;
					});
					
				},false);
				document.getElementById("list").appendChild(list);
			}

		});
		
		document.getElementById("content").setAttribute("style","width:"+(window.innerWidth - 185)+"px");
		window.addEventListener("resize",function(){
			document.getElementById("content").setAttribute("style","width:"+(window.innerWidth - 185)+"px");
		},false)
	</script>
	<script id="script">
		var widgets = [];
		var waiting;
		function updateHints() {
		  myCodeMirror.operation(function(){
			for (var i = 0; i < widgets.length; ++i)
			  myCodeMirror.removeLineWidget(widgets[i]);
			widgets.length = 0;

			JSHINT(myCodeMirror.getValue());
			for (var i = 0; i < JSHINT.errors.length; ++i) {
			  var err = JSHINT.errors[i];
			  if (!err) continue;
			  var msg = document.createElement("div");
			  var icon = msg.appendChild(document.createElement("span"));
			  icon.innerHTML = "!!";
			  icon.className = "lint-error-icon";
			  msg.appendChild(document.createTextNode(err.reason));
			  msg.className = "lint-error";
			  widgets.push(myCodeMirror.addLineWidget(err.line - 1, msg, {coverGutter: false, noHScroll: true}));
			}
		  });
		  var info = myCodeMirror.getScrollInfo();
		  var after = myCodeMirror.charCoords({line: myCodeMirror.getCursor().line + 1, ch: 0}, "local").top;
		  if (info.top + info.clientHeight < after)
			myCodeMirror.scrollTo(null, after - info.clientHeight + 3);
		}

		function runJSHint(){
			clearTimeout(waiting);
			waiting = setTimeout(updateHints, 500);
		}
		
		window.onload = function() {
		  var sc = document.getElementById("script");
		  var content = sc.textContent || sc.innerText || sc.innerHTML;
		  
		};

		"long line to create a horizontal scrollbar, in order to test whether the (non-inline) widgets stay in place when scrolling to the right";
	</script>
	<style>
	  .CodeMirror { border: 1px solid #eee;height: 100%;overflow-y: scroll;}
	  .lint-error {font-family: arial; font-size: 70%; background: #ffa; color: #a00; padding: 2px 5px 3px; }
      .lint-error-icon {color: white; background-color: red; font-weight: bold; border-radius: 50%; padding: 0 3px; margin-right: 7px;}
	</style>
</html>
